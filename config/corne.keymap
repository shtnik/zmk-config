/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        lpair_comb {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
        };

        rpair_comb {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 6>;
        };

        lbkt_comb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
        };

        rbkt_comb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 18>;
        };

        lbrc_comb {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
        };

        rbrc_comb {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 30>;
        };

        cmb_pipe {
            bindings = <&kp PIPE>;
            key-positions = <19 20>;
        };

        cmb_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 20>;
        };

        cmd_tilde {
            bindings = <&kp TILDE>;
            key-positions = <16 15>;
        };

        cmd_grave {
            bindings = <&kp GRAVE>;
            key-positions = <15 14>;
        };

        cmd_minus {
            bindings = <&kp MINUS>;
            key-positions = <31 30>;
        };

        cmd_uderscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <32 33>;
        };

        cmb_plus {
            bindings = <&kp PLUS>;
            key-positions = <28 29>;
        };

        cmb_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <27 26>;
        };

        cmd_equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 20 21>;
        };

        cmd_dolar {
            bindings = <&kp DOLLAR>;
            key-positions = <8 19>;
        };

        cmb_hash {
            bindings = <&kp CARET>;
            key-positions = <3 16>;
        };

        cmb_excl {
            bindings = <&kp EXCLAMATION>;
            key-positions = <15 16 14>;
        };

        hash_cmb {
            bindings = <&kp HASH>;
            key-positions = <3 4>;
        };

        percent_cmb {
            bindings = <&kp PERCENT>;
            key-positions = <7 8>;
        };

        cmd {
            bindings = <&kp AT>;
            key-positions = <8 9>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            flavor = "tap-preferred";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
            flavor = "tap-preferred";
        };

        shft_caps: shft_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q              &kp W                &kp E             &kp R                &kp T                     &kp Y      &kp U                 &kp I             &kp O                 &kp P                  &lt 3 LEFT_BRACKET
&kp TAB     &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D   &hml LEFT_COMMAND F  &kp G                     &kp H      &hmr RIGHT_COMMAND J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr RIGHT_SHIFT SEMI  &kp SQT
&shft_caps  &kp Z              &kp X                &kp C             &kp V                &kp B                     &kp N      &kp M                 &kp COMMA         &kp DOT               &kp FSLH               &mt RIGHT_ALT RIGHT_BRACKET
                                                    &kp LEFT_CONTROL  &mo 1                &mt LEFT_COMMAND SPACE    &kp ENTER  &kp BACKSPACE         &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LC(LG(Q))  &kp N1                &kp N2                &kp N3          &kp N4            &kp N5        &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &trans
&kp K_MUTE     &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&kp LC(SPACE)  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans          &trans            &trans        &trans    &trans    &trans  &trans     &trans  &trans
                                                           &trans          &trans            &trans        &trans    &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT        &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans     &trans    &trans  &trans    &kp HOME  &kp PAGE_UP      &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans     &trans    &trans  &trans    &kp END   &kp PAGE_DOWN    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &trans
                             &mo 4     &trans    &trans           &trans     &trans     &trans
            >;
        };

        fbtn_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6     &trans  &kp DELETE  &kp RALT  &kp RSHFT  &kp RCTRL  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12    &trans  &trans      &trans    &trans     &trans     &trans
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &trans      &trans    &trans     &trans     &trans
                        &trans   &trans   &trans     &trans  &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&soft_off  &sys_reset  &bootloader  &ext_power EP_OFF  &ext_power EP_ON  &ext_power EP_TOG    &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &bootloader  &sys_reset  &soft_off
&trans     &trans      &trans       &trans             &trans            &trans               &trans             &trans            &trans             &trans       &trans      &trans
&trans     &trans      &trans       &trans             &trans            &trans               &trans             &trans            &trans             &trans       &trans      &trans
                                    &trans             &trans            &trans               &trans             &trans            &trans
            >;
        };
    };
};
